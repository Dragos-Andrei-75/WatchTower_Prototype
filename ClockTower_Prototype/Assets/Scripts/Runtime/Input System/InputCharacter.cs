//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Runtime/Input System/InputCharacter.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputCharacter: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputCharacter()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputCharacter"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""0bd405f4-b631-4ca5-8647-10935873ee40"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d48a2120-ff2c-4d85-9301-51582f992551"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Walk"",
                    ""type"": ""Button"",
                    ""id"": ""d7b5e453-e0bb-40e0-baa9-5ee4c16e2da8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""81a31023-d939-4ee7-873b-0e73848b7950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""038b4ad0-12cf-480a-8465-8417e419b08f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swim"",
                    ""type"": ""Button"",
                    ""id"": ""d7b83ea9-95d3-4574-a47c-3eba017de79c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""ab00da57-6faa-47a8-bc57-5b8086fc4a99"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""da36c9fd-8f38-4e16-a6ca-dd13de1f8232"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7114314b-bfc0-4c96-877f-60decf7482e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb51dd30-09a5-4273-acb5-b92de7e2f5df"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70174d91-1cdd-4e1f-aab5-114acb2110ec"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e67e9fa-8103-4539-9727-e14cd5720ba0"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Direction"",
                    ""id"": ""840c5d97-b627-4cd5-8186-81c57d13e588"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3dcb3da2-f228-4b96-a5d4-622b6ab11727"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""69667276-4b96-4006-871c-7d66ded8c0a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e3c93ba4-9a59-4e17-8dc9-730c41478c55"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""25f6c289-cfbd-4945-bb8d-c74b4a2e8511"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Look"",
            ""id"": ""3e3a0d62-0894-43cf-b6a3-128e337cd4f6"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c33d604f-67c5-47f2-8406-4f63afc2eb70"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c27cc7b7-a7be-49ce-9cc0-14bc06ad323f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interact"",
            ""id"": ""1ecfb941-a082-41f5-a2b3-66d8674c7f50"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""7fb77f84-da5a-41a7-b7d5-4119321fcb9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ebef8889-b892-4e28-81b2-47943d9be06b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LoadOut"",
            ""id"": ""1de1da3c-68a0-4b88-964b-dceb1a9b9e72"",
            ""actions"": [
                {
                    ""name"": ""Holster"",
                    ""type"": ""Button"",
                    ""id"": ""d822bf13-d989-43db-a672-2386d7627ad2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon1"",
                    ""type"": ""Button"",
                    ""id"": ""6b49f435-992b-44a8-8a13-755d65da994a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon2"",
                    ""type"": ""Button"",
                    ""id"": ""3600b5b4-5e4a-43f3-9cdd-103b03dd984a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon3"",
                    ""type"": ""Button"",
                    ""id"": ""2c7beef7-1cf1-4758-abd2-52f9500441a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon4"",
                    ""type"": ""Button"",
                    ""id"": ""fd4b9886-a1ab-4172-b792-5357b7768aee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon5"",
                    ""type"": ""Button"",
                    ""id"": ""ab8ebf88-fd67-4c03-856a-b232e3e65d72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon6"",
                    ""type"": ""Button"",
                    ""id"": ""4d3c5a4d-7f59-4781-9992-3ad761b73228"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon7"",
                    ""type"": ""Button"",
                    ""id"": ""33a79b4e-38bf-4e95-ac52-4a3040b2f99a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon8"",
                    ""type"": ""Button"",
                    ""id"": ""543cf474-bb41-42f7-ae35-4ccd4e8a3319"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon9"",
                    ""type"": ""Button"",
                    ""id"": ""6bb0dbe9-bf61-41ed-a75a-4f29dee8bb34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon10"",
                    ""type"": ""Button"",
                    ""id"": ""fd7dcb6e-3c87-4217-b6ed-fca710bbd2e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Weapon11"",
                    ""type"": ""Button"",
                    ""id"": ""8dc4b79d-c8b7-4fc2-b3ad-ed7498896544"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Wheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c54e5f44-59ca-43a7-ba58-04b6a703ffa5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ad18c9b-a8cb-4d4b-bcb4-787c20d28f8f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbfe327d-0fce-4b6b-a6f2-4738bb5c0fd2"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa514bc1-6409-404b-a339-e00606876777"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d1e4e96-e6b7-4dbb-b193-96cefbfd2abb"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a8bbb85-4cab-44f8-bf48-637e9a53a1c2"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb5d5d55-288d-4ecd-9056-13087458fae2"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf9872ec-333b-4b03-9be2-8eee5efcb6b1"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d054771-8972-4dff-a868-34161bcf2218"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45df4971-37d1-4353-a25c-8024a8267415"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9153b44d-656d-4ebb-be63-5d1926812df5"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon10"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8705b62-b9c5-4d1b-9778-71bdbdaf16c0"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Weapon11"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c38bb28-93af-4e25-be9d-360d2499a122"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Holster"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97f8d504-d803-4b3e-bf16-38c9cc9c588f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Shoot"",
            ""id"": ""5d4d8321-a98d-42ed-aa55-aa282a8bf47b"",
            ""actions"": [
                {
                    ""name"": ""ShootPrimary"",
                    ""type"": ""Button"",
                    ""id"": ""5e2a1cf2-8952-4c1d-b693-99b791c2259a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootSecondary"",
                    ""type"": ""Button"",
                    ""id"": ""f6082962-de9b-4254-9b08-46352cc03a6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""478c1f1b-0ea3-4dfb-9b5f-abe4bdb4f656"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootPrimary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""065bb1a9-6f68-4751-b7c3-bedde4edc648"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootSecondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Move = m_Move.FindAction("Move", throwIfNotFound: true);
        m_Move_Walk = m_Move.FindAction("Walk", throwIfNotFound: true);
        m_Move_Jump = m_Move.FindAction("Jump", throwIfNotFound: true);
        m_Move_Crouch = m_Move.FindAction("Crouch", throwIfNotFound: true);
        m_Move_Swim = m_Move.FindAction("Swim", throwIfNotFound: true);
        m_Move_Dash = m_Move.FindAction("Dash", throwIfNotFound: true);
        // Look
        m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
        m_Look_Look = m_Look.FindAction("Look", throwIfNotFound: true);
        // Interact
        m_Interact = asset.FindActionMap("Interact", throwIfNotFound: true);
        m_Interact_Use = m_Interact.FindAction("Use", throwIfNotFound: true);
        // LoadOut
        m_LoadOut = asset.FindActionMap("LoadOut", throwIfNotFound: true);
        m_LoadOut_Holster = m_LoadOut.FindAction("Holster", throwIfNotFound: true);
        m_LoadOut_Weapon1 = m_LoadOut.FindAction("Weapon1", throwIfNotFound: true);
        m_LoadOut_Weapon2 = m_LoadOut.FindAction("Weapon2", throwIfNotFound: true);
        m_LoadOut_Weapon3 = m_LoadOut.FindAction("Weapon3", throwIfNotFound: true);
        m_LoadOut_Weapon4 = m_LoadOut.FindAction("Weapon4", throwIfNotFound: true);
        m_LoadOut_Weapon5 = m_LoadOut.FindAction("Weapon5", throwIfNotFound: true);
        m_LoadOut_Weapon6 = m_LoadOut.FindAction("Weapon6", throwIfNotFound: true);
        m_LoadOut_Weapon7 = m_LoadOut.FindAction("Weapon7", throwIfNotFound: true);
        m_LoadOut_Weapon8 = m_LoadOut.FindAction("Weapon8", throwIfNotFound: true);
        m_LoadOut_Weapon9 = m_LoadOut.FindAction("Weapon9", throwIfNotFound: true);
        m_LoadOut_Weapon10 = m_LoadOut.FindAction("Weapon10", throwIfNotFound: true);
        m_LoadOut_Weapon11 = m_LoadOut.FindAction("Weapon11", throwIfNotFound: true);
        m_LoadOut_Wheel = m_LoadOut.FindAction("Wheel", throwIfNotFound: true);
        // Shoot
        m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
        m_Shoot_ShootPrimary = m_Shoot.FindAction("ShootPrimary", throwIfNotFound: true);
        m_Shoot_ShootSecondary = m_Shoot.FindAction("ShootSecondary", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private List<IMoveActions> m_MoveActionsCallbackInterfaces = new List<IMoveActions>();
    private readonly InputAction m_Move_Move;
    private readonly InputAction m_Move_Walk;
    private readonly InputAction m_Move_Jump;
    private readonly InputAction m_Move_Crouch;
    private readonly InputAction m_Move_Swim;
    private readonly InputAction m_Move_Dash;
    public struct MoveActions
    {
        private @InputCharacter m_Wrapper;
        public MoveActions(@InputCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Move_Move;
        public InputAction @Walk => m_Wrapper.m_Move_Walk;
        public InputAction @Jump => m_Wrapper.m_Move_Jump;
        public InputAction @Crouch => m_Wrapper.m_Move_Crouch;
        public InputAction @Swim => m_Wrapper.m_Move_Swim;
        public InputAction @Dash => m_Wrapper.m_Move_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void AddCallbacks(IMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Swim.started += instance.OnSwim;
            @Swim.performed += instance.OnSwim;
            @Swim.canceled += instance.OnSwim;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Swim.started -= instance.OnSwim;
            @Swim.performed -= instance.OnSwim;
            @Swim.canceled -= instance.OnSwim;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Look
    private readonly InputActionMap m_Look;
    private List<ILookActions> m_LookActionsCallbackInterfaces = new List<ILookActions>();
    private readonly InputAction m_Look_Look;
    public struct LookActions
    {
        private @InputCharacter m_Wrapper;
        public LookActions(@InputCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Look_Look;
        public InputActionMap Get() { return m_Wrapper.m_Look; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
        public void AddCallbacks(ILookActions instance)
        {
            if (instance == null || m_Wrapper.m_LookActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LookActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(ILookActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(ILookActions instance)
        {
            if (m_Wrapper.m_LookActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILookActions instance)
        {
            foreach (var item in m_Wrapper.m_LookActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LookActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LookActions @Look => new LookActions(this);

    // Interact
    private readonly InputActionMap m_Interact;
    private List<IInteractActions> m_InteractActionsCallbackInterfaces = new List<IInteractActions>();
    private readonly InputAction m_Interact_Use;
    public struct InteractActions
    {
        private @InputCharacter m_Wrapper;
        public InteractActions(@InputCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Use => m_Wrapper.m_Interact_Use;
        public InputActionMap Get() { return m_Wrapper.m_Interact; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractActions set) { return set.Get(); }
        public void AddCallbacks(IInteractActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractActionsCallbackInterfaces.Add(instance);
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
        }

        private void UnregisterCallbacks(IInteractActions instance)
        {
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
        }

        public void RemoveCallbacks(IInteractActions instance)
        {
            if (m_Wrapper.m_InteractActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractActions @Interact => new InteractActions(this);

    // LoadOut
    private readonly InputActionMap m_LoadOut;
    private List<ILoadOutActions> m_LoadOutActionsCallbackInterfaces = new List<ILoadOutActions>();
    private readonly InputAction m_LoadOut_Holster;
    private readonly InputAction m_LoadOut_Weapon1;
    private readonly InputAction m_LoadOut_Weapon2;
    private readonly InputAction m_LoadOut_Weapon3;
    private readonly InputAction m_LoadOut_Weapon4;
    private readonly InputAction m_LoadOut_Weapon5;
    private readonly InputAction m_LoadOut_Weapon6;
    private readonly InputAction m_LoadOut_Weapon7;
    private readonly InputAction m_LoadOut_Weapon8;
    private readonly InputAction m_LoadOut_Weapon9;
    private readonly InputAction m_LoadOut_Weapon10;
    private readonly InputAction m_LoadOut_Weapon11;
    private readonly InputAction m_LoadOut_Wheel;
    public struct LoadOutActions
    {
        private @InputCharacter m_Wrapper;
        public LoadOutActions(@InputCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @Holster => m_Wrapper.m_LoadOut_Holster;
        public InputAction @Weapon1 => m_Wrapper.m_LoadOut_Weapon1;
        public InputAction @Weapon2 => m_Wrapper.m_LoadOut_Weapon2;
        public InputAction @Weapon3 => m_Wrapper.m_LoadOut_Weapon3;
        public InputAction @Weapon4 => m_Wrapper.m_LoadOut_Weapon4;
        public InputAction @Weapon5 => m_Wrapper.m_LoadOut_Weapon5;
        public InputAction @Weapon6 => m_Wrapper.m_LoadOut_Weapon6;
        public InputAction @Weapon7 => m_Wrapper.m_LoadOut_Weapon7;
        public InputAction @Weapon8 => m_Wrapper.m_LoadOut_Weapon8;
        public InputAction @Weapon9 => m_Wrapper.m_LoadOut_Weapon9;
        public InputAction @Weapon10 => m_Wrapper.m_LoadOut_Weapon10;
        public InputAction @Weapon11 => m_Wrapper.m_LoadOut_Weapon11;
        public InputAction @Wheel => m_Wrapper.m_LoadOut_Wheel;
        public InputActionMap Get() { return m_Wrapper.m_LoadOut; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadOutActions set) { return set.Get(); }
        public void AddCallbacks(ILoadOutActions instance)
        {
            if (instance == null || m_Wrapper.m_LoadOutActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LoadOutActionsCallbackInterfaces.Add(instance);
            @Holster.started += instance.OnHolster;
            @Holster.performed += instance.OnHolster;
            @Holster.canceled += instance.OnHolster;
            @Weapon1.started += instance.OnWeapon1;
            @Weapon1.performed += instance.OnWeapon1;
            @Weapon1.canceled += instance.OnWeapon1;
            @Weapon2.started += instance.OnWeapon2;
            @Weapon2.performed += instance.OnWeapon2;
            @Weapon2.canceled += instance.OnWeapon2;
            @Weapon3.started += instance.OnWeapon3;
            @Weapon3.performed += instance.OnWeapon3;
            @Weapon3.canceled += instance.OnWeapon3;
            @Weapon4.started += instance.OnWeapon4;
            @Weapon4.performed += instance.OnWeapon4;
            @Weapon4.canceled += instance.OnWeapon4;
            @Weapon5.started += instance.OnWeapon5;
            @Weapon5.performed += instance.OnWeapon5;
            @Weapon5.canceled += instance.OnWeapon5;
            @Weapon6.started += instance.OnWeapon6;
            @Weapon6.performed += instance.OnWeapon6;
            @Weapon6.canceled += instance.OnWeapon6;
            @Weapon7.started += instance.OnWeapon7;
            @Weapon7.performed += instance.OnWeapon7;
            @Weapon7.canceled += instance.OnWeapon7;
            @Weapon8.started += instance.OnWeapon8;
            @Weapon8.performed += instance.OnWeapon8;
            @Weapon8.canceled += instance.OnWeapon8;
            @Weapon9.started += instance.OnWeapon9;
            @Weapon9.performed += instance.OnWeapon9;
            @Weapon9.canceled += instance.OnWeapon9;
            @Weapon10.started += instance.OnWeapon10;
            @Weapon10.performed += instance.OnWeapon10;
            @Weapon10.canceled += instance.OnWeapon10;
            @Weapon11.started += instance.OnWeapon11;
            @Weapon11.performed += instance.OnWeapon11;
            @Weapon11.canceled += instance.OnWeapon11;
            @Wheel.started += instance.OnWheel;
            @Wheel.performed += instance.OnWheel;
            @Wheel.canceled += instance.OnWheel;
        }

        private void UnregisterCallbacks(ILoadOutActions instance)
        {
            @Holster.started -= instance.OnHolster;
            @Holster.performed -= instance.OnHolster;
            @Holster.canceled -= instance.OnHolster;
            @Weapon1.started -= instance.OnWeapon1;
            @Weapon1.performed -= instance.OnWeapon1;
            @Weapon1.canceled -= instance.OnWeapon1;
            @Weapon2.started -= instance.OnWeapon2;
            @Weapon2.performed -= instance.OnWeapon2;
            @Weapon2.canceled -= instance.OnWeapon2;
            @Weapon3.started -= instance.OnWeapon3;
            @Weapon3.performed -= instance.OnWeapon3;
            @Weapon3.canceled -= instance.OnWeapon3;
            @Weapon4.started -= instance.OnWeapon4;
            @Weapon4.performed -= instance.OnWeapon4;
            @Weapon4.canceled -= instance.OnWeapon4;
            @Weapon5.started -= instance.OnWeapon5;
            @Weapon5.performed -= instance.OnWeapon5;
            @Weapon5.canceled -= instance.OnWeapon5;
            @Weapon6.started -= instance.OnWeapon6;
            @Weapon6.performed -= instance.OnWeapon6;
            @Weapon6.canceled -= instance.OnWeapon6;
            @Weapon7.started -= instance.OnWeapon7;
            @Weapon7.performed -= instance.OnWeapon7;
            @Weapon7.canceled -= instance.OnWeapon7;
            @Weapon8.started -= instance.OnWeapon8;
            @Weapon8.performed -= instance.OnWeapon8;
            @Weapon8.canceled -= instance.OnWeapon8;
            @Weapon9.started -= instance.OnWeapon9;
            @Weapon9.performed -= instance.OnWeapon9;
            @Weapon9.canceled -= instance.OnWeapon9;
            @Weapon10.started -= instance.OnWeapon10;
            @Weapon10.performed -= instance.OnWeapon10;
            @Weapon10.canceled -= instance.OnWeapon10;
            @Weapon11.started -= instance.OnWeapon11;
            @Weapon11.performed -= instance.OnWeapon11;
            @Weapon11.canceled -= instance.OnWeapon11;
            @Wheel.started -= instance.OnWheel;
            @Wheel.performed -= instance.OnWheel;
            @Wheel.canceled -= instance.OnWheel;
        }

        public void RemoveCallbacks(ILoadOutActions instance)
        {
            if (m_Wrapper.m_LoadOutActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILoadOutActions instance)
        {
            foreach (var item in m_Wrapper.m_LoadOutActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LoadOutActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LoadOutActions @LoadOut => new LoadOutActions(this);

    // Shoot
    private readonly InputActionMap m_Shoot;
    private List<IShootActions> m_ShootActionsCallbackInterfaces = new List<IShootActions>();
    private readonly InputAction m_Shoot_ShootPrimary;
    private readonly InputAction m_Shoot_ShootSecondary;
    public struct ShootActions
    {
        private @InputCharacter m_Wrapper;
        public ShootActions(@InputCharacter wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootPrimary => m_Wrapper.m_Shoot_ShootPrimary;
        public InputAction @ShootSecondary => m_Wrapper.m_Shoot_ShootSecondary;
        public InputActionMap Get() { return m_Wrapper.m_Shoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
        public void AddCallbacks(IShootActions instance)
        {
            if (instance == null || m_Wrapper.m_ShootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShootActionsCallbackInterfaces.Add(instance);
            @ShootPrimary.started += instance.OnShootPrimary;
            @ShootPrimary.performed += instance.OnShootPrimary;
            @ShootPrimary.canceled += instance.OnShootPrimary;
            @ShootSecondary.started += instance.OnShootSecondary;
            @ShootSecondary.performed += instance.OnShootSecondary;
            @ShootSecondary.canceled += instance.OnShootSecondary;
        }

        private void UnregisterCallbacks(IShootActions instance)
        {
            @ShootPrimary.started -= instance.OnShootPrimary;
            @ShootPrimary.performed -= instance.OnShootPrimary;
            @ShootPrimary.canceled -= instance.OnShootPrimary;
            @ShootSecondary.started -= instance.OnShootSecondary;
            @ShootSecondary.performed -= instance.OnShootSecondary;
            @ShootSecondary.canceled -= instance.OnShootSecondary;
        }

        public void RemoveCallbacks(IShootActions instance)
        {
            if (m_Wrapper.m_ShootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShootActions instance)
        {
            foreach (var item in m_Wrapper.m_ShootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShootActions @Shoot => new ShootActions(this);
    public interface IMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSwim(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ILookActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IInteractActions
    {
        void OnUse(InputAction.CallbackContext context);
    }
    public interface ILoadOutActions
    {
        void OnHolster(InputAction.CallbackContext context);
        void OnWeapon1(InputAction.CallbackContext context);
        void OnWeapon2(InputAction.CallbackContext context);
        void OnWeapon3(InputAction.CallbackContext context);
        void OnWeapon4(InputAction.CallbackContext context);
        void OnWeapon5(InputAction.CallbackContext context);
        void OnWeapon6(InputAction.CallbackContext context);
        void OnWeapon7(InputAction.CallbackContext context);
        void OnWeapon8(InputAction.CallbackContext context);
        void OnWeapon9(InputAction.CallbackContext context);
        void OnWeapon10(InputAction.CallbackContext context);
        void OnWeapon11(InputAction.CallbackContext context);
        void OnWheel(InputAction.CallbackContext context);
    }
    public interface IShootActions
    {
        void OnShootPrimary(InputAction.CallbackContext context);
        void OnShootSecondary(InputAction.CallbackContext context);
    }
}
